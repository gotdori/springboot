package com.kosa.myapp.config;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

//컨피그를 지정하기 위한 어노테이션
//파일명과 클래스명은 바뀌어도 괜찮음

@Configuration
public class MyBatisConfig {
	
	@Autowired
	ApplicationContext applicationContext;
	
	//hikari 설정하기
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	public HikariConfig hikariConfig() {
		return new HikariConfig();
	}
	
	@Bean
	public DataSource dataSource() {
		return new HikariDataSource(hikariConfig());
	}

	@Bean //객체 생성
	public SqlSessionFactory makeSqlSessionFactory(DataSource dataSource) throws Exception {
		// SqlSessionFactiory : Factory 공장객체를 먼저 만들어서 던진다
		final SqlSessionFactoryBean factory = new SqlSessionFactoryBean();
		
		//저 객체와 application.properties 파일에 있는 datasource와 연결
		factory.setDataSource(dataSource);
		//설정파일과 연동하기(mybatis-config.xml) 파일과 연동
		PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
		//classpath : src/main/resource
		Resource configLocation = resolver.getResource("classpath:mybatis-config.xml");
		
		factory.setConfigLocation(configLocation);
		return factory.getObject();
	}
	
	@Bean
	public SqlSessionTemplate makSqlSession(SqlSessionFactory factory) {
		return new SqlSessionTemplate(factory);
	}
}
